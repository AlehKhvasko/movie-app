{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet VideoEmbedComponent = class VideoEmbedComponent {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n    this.site = 'YouTube';\n    this.key = null;\n  }\n  onInit() {}\n  getSafeUrl(url) {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n};\n__decorate([Input()], VideoEmbedComponent.prototype, \"site\", void 0);\n__decorate([Input()], VideoEmbedComponent.prototype, \"key\", void 0);\nVideoEmbedComponent = __decorate([Component({\n  selector: 'video-embed',\n  templateUrl: './video-embed.component.html',\n  styleUrls: ['./video-embed.component.scss']\n})], VideoEmbedComponent);\nexport { VideoEmbedComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAgB,eAAe;AAQjD,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAI9BC,YAAoBC,SAAuB;IAAvB,cAAS,GAATA,SAAS;IAHpB,SAAI,GAAW,SAAS;IACxB,QAAG,GAAkB,IAAI;EAEY;EAE9CC,MAAM,IAAI;EAEVC,UAAU,CAACC,GAAU;IACnB,OAAO,IAAI,CAACH,SAAS,CAACI,8BAA8B,CAACD,GAAG,CAAC;EAC3D;CACD;AAVUE,YAARR,KAAK,EAAE,iDAA0B;AACzBQ,YAARR,KAAK,EAAE,gDAA2B;AAFxBC,mBAAmB,eAL/BF,SAAS,CAAC;EACTU,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACWV,mBAAmB,CAW/B;SAXYA,mBAAmB","names":["Component","Input","VideoEmbedComponent","constructor","sanitizer","onInit","getSafeUrl","url","bypassSecurityTrustResourceUrl","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\alehk\\OneDrive\\Desktop\\typescript\\movie-app\\src\\app\\components\\video-embed\\video-embed.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'video-embed',\n  templateUrl: './video-embed.component.html',\n  styleUrls: ['./video-embed.component.scss']\n})\nexport class VideoEmbedComponent implements OnInit {\n  @Input() site: string = 'YouTube';\n  @Input() key: string | null = null;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  onInit() {}\n\n  getSafeUrl(url:string){\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}